// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/merge-ats-go/pkg/utils"
	"time"
)

// JobStatus - * `OPEN` - OPEN
// * `CLOSED` - CLOSED
// * `DRAFT` - DRAFT
// * `ARCHIVED` - ARCHIVED
// * `PENDING` - PENDING
type JobStatus string

const (
	JobStatusOpen     JobStatus = "OPEN"
	JobStatusClosed   JobStatus = "CLOSED"
	JobStatusDraft    JobStatus = "DRAFT"
	JobStatusArchived JobStatus = "ARCHIVED"
	JobStatusPending  JobStatus = "PENDING"
)

func (e JobStatus) ToPointer() *JobStatus {
	return &e
}

func (e *JobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "CLOSED":
		fallthrough
	case "DRAFT":
		fallthrough
	case "ARCHIVED":
		fallthrough
	case "PENDING":
		*e = JobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStatus: %v", v)
	}
}

// Job - # The Job Object
// ### Description
// The `Job` object can be used to track any jobs that are currently or will be open/closed for applications.
// ### Usage Example
// Fetch from the `LIST Jobs` endpoint to show all job postings.
type Job struct {
	// The job's code. Typically an additional identifier used to reference the particular job that is displayed on the ATS.
	Code *string `json:"code,omitempty"`
	// Whether the job is confidential.
	Confidential *bool `json:"confidential,omitempty"`
	// IDs of `Department` objects for this `Job`.
	Departments []string `json:"departments,omitempty"`
	// The job's description.
	Description   *string                `json:"description,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	// IDs of `RemoteUser` objects that serve as hiring managers for this `Job`.
	HiringManagers []string `json:"hiring_managers,omitempty"`
	ID             *string  `json:"id,omitempty"`
	JobPostingUrls []URL    `json:"job_posting_urls,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The job's name.
	Name *string `json:"name,omitempty"`
	// IDs of `Office` objects for this `Job`.
	Offices []string `json:"offices,omitempty"`
	// IDs of `RemoteUser` objects that serve as recruiters for this `Job`.
	Recruiters []string `json:"recruiters,omitempty"`
	// When the third party's job was created.
	RemoteCreatedAt *time.Time   `json:"remote_created_at,omitempty"`
	RemoteData      []RemoteData `json:"remote_data,omitempty"`
	// The third-party API ID of the matching object.
	RemoteID *string `json:"remote_id,omitempty"`
	// When the third party's job was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// The job's status.
	//
	// * `OPEN` - OPEN
	// * `CLOSED` - CLOSED
	// * `DRAFT` - DRAFT
	// * `ARCHIVED` - ARCHIVED
	// * `PENDING` - PENDING
	Status *JobStatus `json:"status,omitempty"`
}

func (j Job) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(j, "", false)
}

func (j *Job) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &j, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Job) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Job) GetConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.Confidential
}

func (o *Job) GetDepartments() []string {
	if o == nil {
		return nil
	}
	return o.Departments
}

func (o *Job) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Job) GetFieldMappings() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *Job) GetHiringManagers() []string {
	if o == nil {
		return nil
	}
	return o.HiringManagers
}

func (o *Job) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Job) GetJobPostingUrls() []URL {
	if o == nil {
		return nil
	}
	return o.JobPostingUrls
}

func (o *Job) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *Job) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Job) GetOffices() []string {
	if o == nil {
		return nil
	}
	return o.Offices
}

func (o *Job) GetRecruiters() []string {
	if o == nil {
		return nil
	}
	return o.Recruiters
}

func (o *Job) GetRemoteCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteCreatedAt
}

func (o *Job) GetRemoteData() []RemoteData {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *Job) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *Job) GetRemoteUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteUpdatedAt
}

func (o *Job) GetRemoteWasDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.RemoteWasDeleted
}

func (o *Job) GetStatus() *JobStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
