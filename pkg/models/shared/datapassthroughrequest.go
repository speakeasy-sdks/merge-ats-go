// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DataPassthroughRequestMethod - * `GET` - GET
// * `OPTIONS` - OPTIONS
// * `HEAD` - HEAD
// * `POST` - POST
// * `PUT` - PUT
// * `PATCH` - PATCH
// * `DELETE` - DELETE
type DataPassthroughRequestMethod string

const (
	DataPassthroughRequestMethodGet     DataPassthroughRequestMethod = "GET"
	DataPassthroughRequestMethodOptions DataPassthroughRequestMethod = "OPTIONS"
	DataPassthroughRequestMethodHead    DataPassthroughRequestMethod = "HEAD"
	DataPassthroughRequestMethodPost    DataPassthroughRequestMethod = "POST"
	DataPassthroughRequestMethodPut     DataPassthroughRequestMethod = "PUT"
	DataPassthroughRequestMethodPatch   DataPassthroughRequestMethod = "PATCH"
	DataPassthroughRequestMethodDelete  DataPassthroughRequestMethod = "DELETE"
)

func (e DataPassthroughRequestMethod) ToPointer() *DataPassthroughRequestMethod {
	return &e
}

func (e *DataPassthroughRequestMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "OPTIONS":
		fallthrough
	case "HEAD":
		fallthrough
	case "POST":
		fallthrough
	case "PUT":
		fallthrough
	case "PATCH":
		fallthrough
	case "DELETE":
		*e = DataPassthroughRequestMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataPassthroughRequestMethod: %v", v)
	}
}

// DataPassthroughRequestRequestFormat - * `JSON` - JSON
// * `XML` - XML
// * `MULTIPART` - MULTIPART
type DataPassthroughRequestRequestFormat string

const (
	DataPassthroughRequestRequestFormatJSON      DataPassthroughRequestRequestFormat = "JSON"
	DataPassthroughRequestRequestFormatXML       DataPassthroughRequestRequestFormat = "XML"
	DataPassthroughRequestRequestFormatMultipart DataPassthroughRequestRequestFormat = "MULTIPART"
)

func (e DataPassthroughRequestRequestFormat) ToPointer() *DataPassthroughRequestRequestFormat {
	return &e
}

func (e *DataPassthroughRequestRequestFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JSON":
		fallthrough
	case "XML":
		fallthrough
	case "MULTIPART":
		*e = DataPassthroughRequestRequestFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataPassthroughRequestRequestFormat: %v", v)
	}
}

// DataPassthroughRequest - # The DataPassthrough Object
// ### Description
// The `DataPassthrough` object is used to send information to an otherwise-unsupported third-party endpoint.
//
// ### Usage Example
// Create a `DataPassthrough` to get team hierarchies from your Rippling integration.
type DataPassthroughRequest struct {
	BaseURLOverride *string `json:"base_url_override,omitempty"`
	Data            *string `json:"data,omitempty"`
	// The headers to use for the request (Merge will handle the account's authorization headers). `Content-Type` header is required for passthrough. Choose content type corresponding to expected format of receiving server.
	Headers map[string]interface{}       `json:"headers,omitempty"`
	Method  DataPassthroughRequestMethod `json:"method"`
	// Pass an array of `MultipartFormField` objects in here instead of using the `data` param if `request_format` is set to `MULTIPART`.
	MultipartFormData []MultipartFormFieldRequest `json:"multipart_form_data,omitempty"`
	// Optional. If true, the response will always be an object of the form `{"type": T, "value": ...}` where `T` will be one of `string, boolean, number, null, array, object`.
	NormalizeResponse *bool                                `json:"normalize_response,omitempty"`
	Path              string                               `json:"path"`
	RequestFormat     *DataPassthroughRequestRequestFormat `json:"request_format,omitempty"`
}

func (o *DataPassthroughRequest) GetBaseURLOverride() *string {
	if o == nil {
		return nil
	}
	return o.BaseURLOverride
}

func (o *DataPassthroughRequest) GetData() *string {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *DataPassthroughRequest) GetHeaders() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *DataPassthroughRequest) GetMethod() DataPassthroughRequestMethod {
	if o == nil {
		return DataPassthroughRequestMethod("")
	}
	return o.Method
}

func (o *DataPassthroughRequest) GetMultipartFormData() []MultipartFormFieldRequest {
	if o == nil {
		return nil
	}
	return o.MultipartFormData
}

func (o *DataPassthroughRequest) GetNormalizeResponse() *bool {
	if o == nil {
		return nil
	}
	return o.NormalizeResponse
}

func (o *DataPassthroughRequest) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *DataPassthroughRequest) GetRequestFormat() *DataPassthroughRequestRequestFormat {
	if o == nil {
		return nil
	}
	return o.RequestFormat
}
