// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/merge-ats-go/pkg/utils"
	"time"
)

// DisabilityStatus - The candidate's disability status.
//
// * `YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY` - YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY
// * `NO_I_DONT_HAVE_A_DISABILITY` - NO_I_DONT_HAVE_A_DISABILITY
// * `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
type DisabilityStatus string

const (
	DisabilityStatusYesIHaveADisabilityOrPreviouslyHadADisability DisabilityStatus = "YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY"
	DisabilityStatusNoIDontHaveADisability                        DisabilityStatus = "NO_I_DONT_HAVE_A_DISABILITY"
	DisabilityStatusIDontWishToAnswer                             DisabilityStatus = "I_DONT_WISH_TO_ANSWER"
)

func (e DisabilityStatus) ToPointer() *DisabilityStatus {
	return &e
}

func (e *DisabilityStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY":
		fallthrough
	case "NO_I_DONT_HAVE_A_DISABILITY":
		fallthrough
	case "I_DONT_WISH_TO_ANSWER":
		*e = DisabilityStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisabilityStatus: %v", v)
	}
}

// Gender - The candidate's gender.
//
// * `MALE` - MALE
// * `FEMALE` - FEMALE
// * `NON-BINARY` - NON-BINARY
// * `OTHER` - OTHER
// * `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
type Gender string

const (
	GenderMale                  Gender = "MALE"
	GenderFemale                Gender = "FEMALE"
	GenderNonBinary             Gender = "NON-BINARY"
	GenderOther                 Gender = "OTHER"
	GenderDeclineToSelfIdentify Gender = "DECLINE_TO_SELF_IDENTIFY"
)

func (e Gender) ToPointer() *Gender {
	return &e
}

func (e *Gender) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MALE":
		fallthrough
	case "FEMALE":
		fallthrough
	case "NON-BINARY":
		fallthrough
	case "OTHER":
		fallthrough
	case "DECLINE_TO_SELF_IDENTIFY":
		*e = Gender(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Gender: %v", v)
	}
}

// Race - The candidate's race.
//
// * `AMERICAN_INDIAN_OR_ALASKAN_NATIVE` - AMERICAN_INDIAN_OR_ALASKAN_NATIVE
// * `ASIAN` - ASIAN
// * `BLACK_OR_AFRICAN_AMERICAN` - BLACK_OR_AFRICAN_AMERICAN
// * `HISPANIC_OR_LATINO` - HISPANIC_OR_LATINO
// * `WHITE` - WHITE
// * `NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER` - NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER
// * `TWO_OR_MORE_RACES` - TWO_OR_MORE_RACES
// * `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
type Race string

const (
	RaceAmericanIndianOrAlaskanNative        Race = "AMERICAN_INDIAN_OR_ALASKAN_NATIVE"
	RaceAsian                                Race = "ASIAN"
	RaceBlackOrAfricanAmerican               Race = "BLACK_OR_AFRICAN_AMERICAN"
	RaceHispanicOrLatino                     Race = "HISPANIC_OR_LATINO"
	RaceWhite                                Race = "WHITE"
	RaceNativeHawaiianOrOtherPacificIslander Race = "NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER"
	RaceTwoOrMoreRaces                       Race = "TWO_OR_MORE_RACES"
	RaceDeclineToSelfIdentify                Race = "DECLINE_TO_SELF_IDENTIFY"
)

func (e Race) ToPointer() *Race {
	return &e
}

func (e *Race) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AMERICAN_INDIAN_OR_ALASKAN_NATIVE":
		fallthrough
	case "ASIAN":
		fallthrough
	case "BLACK_OR_AFRICAN_AMERICAN":
		fallthrough
	case "HISPANIC_OR_LATINO":
		fallthrough
	case "WHITE":
		fallthrough
	case "NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER":
		fallthrough
	case "TWO_OR_MORE_RACES":
		fallthrough
	case "DECLINE_TO_SELF_IDENTIFY":
		*e = Race(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Race: %v", v)
	}
}

// VeteranStatus - The candidate's veteran status.
//
// * `I_AM_NOT_A_PROTECTED_VETERAN` - I_AM_NOT_A_PROTECTED_VETERAN
// * `I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN` - I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN
// * `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
type VeteranStatus string

const (
	VeteranStatusIAmNotAProtectedVeteran                                     VeteranStatus = "I_AM_NOT_A_PROTECTED_VETERAN"
	VeteranStatusIIdentifyAsOneOrMoreOfTheClassificationsOfAProtectedVeteran VeteranStatus = "I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN"
	VeteranStatusIDontWishToAnswer                                           VeteranStatus = "I_DONT_WISH_TO_ANSWER"
)

func (e VeteranStatus) ToPointer() *VeteranStatus {
	return &e
}

func (e *VeteranStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "I_AM_NOT_A_PROTECTED_VETERAN":
		fallthrough
	case "I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN":
		fallthrough
	case "I_DONT_WISH_TO_ANSWER":
		*e = VeteranStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VeteranStatus: %v", v)
	}
}

// Eeoc - # The EEOC Object
// ### Description
// The `EEOC` object is used to represent the Equal Employment Opportunity Commission information for a candidate (race, gender, veteran status, disability status).
// ### Usage Example
// Fetch from the `LIST EEOCs` endpoint and filter by `candidate` to show all EEOC information for a candidate.
type Eeoc struct {
	// The candidate being represented.
	Candidate *string `json:"candidate,omitempty"`
	// The candidate's disability status.
	//
	// * `YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY` - YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY
	// * `NO_I_DONT_HAVE_A_DISABILITY` - NO_I_DONT_HAVE_A_DISABILITY
	// * `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
	DisabilityStatus *DisabilityStatus      `json:"disability_status,omitempty"`
	FieldMappings    map[string]interface{} `json:"field_mappings,omitempty"`
	// The candidate's gender.
	//
	// * `MALE` - MALE
	// * `FEMALE` - FEMALE
	// * `NON-BINARY` - NON-BINARY
	// * `OTHER` - OTHER
	// * `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
	Gender *Gender `json:"gender,omitempty"`
	ID     *string `json:"id,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The candidate's race.
	//
	// * `AMERICAN_INDIAN_OR_ALASKAN_NATIVE` - AMERICAN_INDIAN_OR_ALASKAN_NATIVE
	// * `ASIAN` - ASIAN
	// * `BLACK_OR_AFRICAN_AMERICAN` - BLACK_OR_AFRICAN_AMERICAN
	// * `HISPANIC_OR_LATINO` - HISPANIC_OR_LATINO
	// * `WHITE` - WHITE
	// * `NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER` - NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER
	// * `TWO_OR_MORE_RACES` - TWO_OR_MORE_RACES
	// * `DECLINE_TO_SELF_IDENTIFY` - DECLINE_TO_SELF_IDENTIFY
	Race       *Race        `json:"race,omitempty"`
	RemoteData []RemoteData `json:"remote_data,omitempty"`
	// The third-party API ID of the matching object.
	RemoteID *string `json:"remote_id,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// When the information was submitted.
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`
	// The candidate's veteran status.
	//
	// * `I_AM_NOT_A_PROTECTED_VETERAN` - I_AM_NOT_A_PROTECTED_VETERAN
	// * `I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN` - I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN
	// * `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
	VeteranStatus *VeteranStatus `json:"veteran_status,omitempty"`
}

func (e Eeoc) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Eeoc) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Eeoc) GetCandidate() *string {
	if o == nil {
		return nil
	}
	return o.Candidate
}

func (o *Eeoc) GetDisabilityStatus() *DisabilityStatus {
	if o == nil {
		return nil
	}
	return o.DisabilityStatus
}

func (o *Eeoc) GetFieldMappings() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *Eeoc) GetGender() *Gender {
	if o == nil {
		return nil
	}
	return o.Gender
}

func (o *Eeoc) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Eeoc) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *Eeoc) GetRace() *Race {
	if o == nil {
		return nil
	}
	return o.Race
}

func (o *Eeoc) GetRemoteData() []RemoteData {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *Eeoc) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *Eeoc) GetRemoteWasDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.RemoteWasDeleted
}

func (o *Eeoc) GetSubmittedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.SubmittedAt
}

func (o *Eeoc) GetVeteranStatus() *VeteranStatus {
	if o == nil {
		return nil
	}
	return o.VeteranStatus
}
