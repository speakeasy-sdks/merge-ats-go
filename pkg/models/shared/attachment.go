// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/merge-ats-go/pkg/utils"
	"time"
)

// AttachmentType - * `RESUME` - RESUME
// * `COVER_LETTER` - COVER_LETTER
// * `OFFER_LETTER` - OFFER_LETTER
// * `OTHER` - OTHER
type AttachmentType string

const (
	AttachmentTypeResume      AttachmentType = "RESUME"
	AttachmentTypeCoverLetter AttachmentType = "COVER_LETTER"
	AttachmentTypeOfferLetter AttachmentType = "OFFER_LETTER"
	AttachmentTypeOther       AttachmentType = "OTHER"
)

func (e AttachmentType) ToPointer() *AttachmentType {
	return &e
}

func (e *AttachmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RESUME":
		fallthrough
	case "COVER_LETTER":
		fallthrough
	case "OFFER_LETTER":
		fallthrough
	case "OTHER":
		*e = AttachmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AttachmentType: %v", v)
	}
}

// Attachment - # The Attachment Object
// ### Description
// The `Attachment` object is used to represent a file attached to a candidate.
// ### Usage Example
// Fetch from the `LIST Attachments` endpoint and view attachments accessible by a company.
type Attachment struct {
	// The attachment's type.
	//
	// * `RESUME` - RESUME
	// * `COVER_LETTER` - COVER_LETTER
	// * `OFFER_LETTER` - OFFER_LETTER
	// * `OTHER` - OTHER
	AttachmentType *AttachmentType        `json:"attachment_type,omitempty"`
	Candidate      *string                `json:"candidate,omitempty"`
	FieldMappings  map[string]interface{} `json:"field_mappings,omitempty"`
	// The attachment's name.
	FileName *string `json:"file_name,omitempty"`
	// The attachment's url.
	FileURL *string `json:"file_url,omitempty"`
	ID      *string `json:"id,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time   `json:"modified_at,omitempty"`
	RemoteData []RemoteData `json:"remote_data,omitempty"`
	// The third-party API ID of the matching object.
	RemoteID         *string `json:"remote_id,omitempty"`
	RemoteWasDeleted *bool   `json:"remote_was_deleted,omitempty"`
}

func (a Attachment) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Attachment) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Attachment) GetAttachmentType() *AttachmentType {
	if o == nil {
		return nil
	}
	return o.AttachmentType
}

func (o *Attachment) GetCandidate() *string {
	if o == nil {
		return nil
	}
	return o.Candidate
}

func (o *Attachment) GetFieldMappings() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *Attachment) GetFileName() *string {
	if o == nil {
		return nil
	}
	return o.FileName
}

func (o *Attachment) GetFileURL() *string {
	if o == nil {
		return nil
	}
	return o.FileURL
}

func (o *Attachment) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Attachment) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *Attachment) GetRemoteData() []RemoteData {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *Attachment) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *Attachment) GetRemoteWasDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.RemoteWasDeleted
}
