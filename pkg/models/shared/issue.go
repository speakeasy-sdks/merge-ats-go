// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/merge-ats-go/pkg/utils"
	"time"
)

// IssueStatus - * `ONGOING` - ONGOING
// * `RESOLVED` - RESOLVED
type IssueStatus string

const (
	IssueStatusOngoing  IssueStatus = "ONGOING"
	IssueStatusResolved IssueStatus = "RESOLVED"
)

func (e IssueStatus) ToPointer() *IssueStatus {
	return &e
}

func (e *IssueStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ONGOING":
		fallthrough
	case "RESOLVED":
		*e = IssueStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssueStatus: %v", v)
	}
}

type Issue struct {
	EndUser           map[string]interface{} `json:"end_user,omitempty"`
	ErrorDescription  string                 `json:"error_description"`
	ErrorDetails      []string               `json:"error_details,omitempty"`
	FirstIncidentTime *time.Time             `json:"first_incident_time,omitempty"`
	ID                *string                `json:"id,omitempty"`
	IsMuted           *bool                  `json:"is_muted,omitempty"`
	LastIncidentTime  *time.Time             `json:"last_incident_time,omitempty"`
	// Status of the issue. Options: ('ONGOING', 'RESOLVED')
	//
	// * `ONGOING` - ONGOING
	// * `RESOLVED` - RESOLVED
	Status *IssueStatus `json:"status,omitempty"`
}

func (i Issue) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *Issue) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Issue) GetEndUser() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.EndUser
}

func (o *Issue) GetErrorDescription() string {
	if o == nil {
		return ""
	}
	return o.ErrorDescription
}

func (o *Issue) GetErrorDetails() []string {
	if o == nil {
		return nil
	}
	return o.ErrorDetails
}

func (o *Issue) GetFirstIncidentTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.FirstIncidentTime
}

func (o *Issue) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Issue) GetIsMuted() *bool {
	if o == nil {
		return nil
	}
	return o.IsMuted
}

func (o *Issue) GetLastIncidentTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastIncidentTime
}

func (o *Issue) GetStatus() *IssueStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
