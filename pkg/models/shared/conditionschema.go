// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type ConditionSchema struct {
	// The common model for which a condition schema is defined.
	CommonModel *string `json:"common_model,omitempty"`
	// The type of value(s) that can be set for this condition.
	//
	// * `BOOLEAN` - BOOLEAN
	// * `DATE` - DATE
	// * `DATE_TIME` - DATE_TIME
	// * `INTEGER` - INTEGER
	// * `FLOAT` - FLOAT
	// * `STRING` - STRING
	// * `LIST_OF_STRINGS` - LIST_OF_STRINGS
	ConditionType ConditionTypeEnum `json:"condition_type"`
	// The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. "location_type".
	FieldName string `json:"field_name"`
	// The ID of the condition schema. This ID is used when updating selective syncs for a linked account.
	ID string `json:"id"`
	// Whether this condition can only be applied once. If false, the condition can be AND'd together multiple times.
	IsUnique *bool `json:"is_unique,omitempty"`
	// User-facing *native condition* name. e.g. "Skip Manager".
	NativeName string `json:"native_name"`
	// The schemas for the operators that can be used on a condition.
	Operators []OperatorSchema `json:"operators"`
}

func (o *ConditionSchema) GetCommonModel() *string {
	if o == nil {
		return nil
	}
	return o.CommonModel
}

func (o *ConditionSchema) GetConditionType() ConditionTypeEnum {
	if o == nil {
		return ConditionTypeEnum("")
	}
	return o.ConditionType
}

func (o *ConditionSchema) GetFieldName() string {
	if o == nil {
		return ""
	}
	return o.FieldName
}

func (o *ConditionSchema) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConditionSchema) GetIsUnique() *bool {
	if o == nil {
		return nil
	}
	return o.IsUnique
}

func (o *ConditionSchema) GetNativeName() string {
	if o == nil {
		return ""
	}
	return o.NativeName
}

func (o *ConditionSchema) GetOperators() []OperatorSchema {
	if o == nil {
		return []OperatorSchema{}
	}
	return o.Operators
}
