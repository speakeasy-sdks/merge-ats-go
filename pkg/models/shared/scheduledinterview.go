// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/merge-ats-go/pkg/utils"
	"time"
)

// ScheduledInterviewStatus - * `SCHEDULED` - SCHEDULED
// * `AWAITING_FEEDBACK` - AWAITING_FEEDBACK
// * `COMPLETE` - COMPLETE
type ScheduledInterviewStatus string

const (
	ScheduledInterviewStatusScheduled        ScheduledInterviewStatus = "SCHEDULED"
	ScheduledInterviewStatusAwaitingFeedback ScheduledInterviewStatus = "AWAITING_FEEDBACK"
	ScheduledInterviewStatusComplete         ScheduledInterviewStatus = "COMPLETE"
)

func (e ScheduledInterviewStatus) ToPointer() *ScheduledInterviewStatus {
	return &e
}

func (e *ScheduledInterviewStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SCHEDULED":
		fallthrough
	case "AWAITING_FEEDBACK":
		fallthrough
	case "COMPLETE":
		*e = ScheduledInterviewStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduledInterviewStatus: %v", v)
	}
}

// ScheduledInterview - # The ScheduledInterview Object
// ### Description
// The `ScheduledInterview` object is used to represent a scheduled interview for a given candidateâ€™s application to a job. An `Application` can have multiple `ScheduledInterview`s depending on the particular hiring process.
// ### Usage Example
// Fetch from the `LIST ScheduledInterviews` endpoint and filter by `interviewers` to show all office locations.
type ScheduledInterview struct {
	// The application being interviewed.
	Application *string `json:"application,omitempty"`
	// When the interview was ended.
	EndAt         *time.Time             `json:"end_at,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	ID            *string                `json:"id,omitempty"`
	// Array of `RemoteUser` IDs.
	Interviewers []string `json:"interviewers,omitempty"`
	// The stage of the interview.
	JobInterviewStage *string `json:"job_interview_stage,omitempty"`
	// The interview's location.
	Location *string `json:"location,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The user organizing the interview.
	Organizer *string `json:"organizer,omitempty"`
	// When the third party's interview was created.
	RemoteCreatedAt *time.Time   `json:"remote_created_at,omitempty"`
	RemoteData      []RemoteData `json:"remote_data,omitempty"`
	// The third-party API ID of the matching object.
	RemoteID *string `json:"remote_id,omitempty"`
	// When the third party's interview was updated.
	RemoteUpdatedAt *time.Time `json:"remote_updated_at,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// When the interview was started.
	StartAt *time.Time `json:"start_at,omitempty"`
	// The interview's status.
	//
	// * `SCHEDULED` - SCHEDULED
	// * `AWAITING_FEEDBACK` - AWAITING_FEEDBACK
	// * `COMPLETE` - COMPLETE
	Status *ScheduledInterviewStatus `json:"status,omitempty"`
}

func (s ScheduledInterview) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ScheduledInterview) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ScheduledInterview) GetApplication() *string {
	if o == nil {
		return nil
	}
	return o.Application
}

func (o *ScheduledInterview) GetEndAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndAt
}

func (o *ScheduledInterview) GetFieldMappings() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *ScheduledInterview) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ScheduledInterview) GetInterviewers() []string {
	if o == nil {
		return nil
	}
	return o.Interviewers
}

func (o *ScheduledInterview) GetJobInterviewStage() *string {
	if o == nil {
		return nil
	}
	return o.JobInterviewStage
}

func (o *ScheduledInterview) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *ScheduledInterview) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *ScheduledInterview) GetOrganizer() *string {
	if o == nil {
		return nil
	}
	return o.Organizer
}

func (o *ScheduledInterview) GetRemoteCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteCreatedAt
}

func (o *ScheduledInterview) GetRemoteData() []RemoteData {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *ScheduledInterview) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *ScheduledInterview) GetRemoteUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteUpdatedAt
}

func (o *ScheduledInterview) GetRemoteWasDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.RemoteWasDeleted
}

func (o *ScheduledInterview) GetStartAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartAt
}

func (o *ScheduledInterview) GetStatus() *ScheduledInterviewStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
