// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/merge-ats-go/pkg/utils"
	"time"
)

// OfferStatus - The offer's status.
//
// * `DRAFT` - DRAFT
// * `APPROVAL-SENT` - APPROVAL-SENT
// * `APPROVED` - APPROVED
// * `SENT` - SENT
// * `SENT-MANUALLY` - SENT-MANUALLY
// * `OPENED` - OPENED
// * `DENIED` - DENIED
// * `SIGNED` - SIGNED
// * `DEPRECATED` - DEPRECATED
type OfferStatus string

const (
	OfferStatusDraft        OfferStatus = "DRAFT"
	OfferStatusApprovalSent OfferStatus = "APPROVAL-SENT"
	OfferStatusApproved     OfferStatus = "APPROVED"
	OfferStatusSent         OfferStatus = "SENT"
	OfferStatusSentManually OfferStatus = "SENT-MANUALLY"
	OfferStatusOpened       OfferStatus = "OPENED"
	OfferStatusDenied       OfferStatus = "DENIED"
	OfferStatusSigned       OfferStatus = "SIGNED"
	OfferStatusDeprecated   OfferStatus = "DEPRECATED"
)

func (e OfferStatus) ToPointer() *OfferStatus {
	return &e
}

func (e *OfferStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "APPROVAL-SENT":
		fallthrough
	case "APPROVED":
		fallthrough
	case "SENT":
		fallthrough
	case "SENT-MANUALLY":
		fallthrough
	case "OPENED":
		fallthrough
	case "DENIED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "DEPRECATED":
		*e = OfferStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OfferStatus: %v", v)
	}
}

// Offer - # The Offer Object
// ### Description
// The `Offer` object is used to represent an offer for a candidate's application specific to a job.
// ### Usage Example
// Fetch from the `LIST Offers` endpoint and filter by `ID` to show all offers.
type Offer struct {
	// The application who is receiving the offer.
	Application *string `json:"application,omitempty"`
	// When the offer was closed.
	ClosedAt *time.Time `json:"closed_at,omitempty"`
	// The user who created the offer.
	Creator       *string                `json:"creator,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	ID            *string                `json:"id,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// When the third party's offer was created.
	RemoteCreatedAt *time.Time   `json:"remote_created_at,omitempty"`
	RemoteData      []RemoteData `json:"remote_data,omitempty"`
	// The third-party API ID of the matching object.
	RemoteID *string `json:"remote_id,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// When the offer was sent.
	SentAt *time.Time `json:"sent_at,omitempty"`
	// The employment start date on the offer.
	StartDate *time.Time `json:"start_date,omitempty"`
	// The offer's status.
	//
	// * `DRAFT` - DRAFT
	// * `APPROVAL-SENT` - APPROVAL-SENT
	// * `APPROVED` - APPROVED
	// * `SENT` - SENT
	// * `SENT-MANUALLY` - SENT-MANUALLY
	// * `OPENED` - OPENED
	// * `DENIED` - DENIED
	// * `SIGNED` - SIGNED
	// * `DEPRECATED` - DEPRECATED
	Status *OfferStatus `json:"status,omitempty"`
}

func (o Offer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *Offer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Offer) GetApplication() *string {
	if o == nil {
		return nil
	}
	return o.Application
}

func (o *Offer) GetClosedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ClosedAt
}

func (o *Offer) GetCreator() *string {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *Offer) GetFieldMappings() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *Offer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Offer) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *Offer) GetRemoteCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteCreatedAt
}

func (o *Offer) GetRemoteData() []RemoteData {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *Offer) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *Offer) GetRemoteWasDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.RemoteWasDeleted
}

func (o *Offer) GetSentAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.SentAt
}

func (o *Offer) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *Offer) GetStatus() *OfferStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
