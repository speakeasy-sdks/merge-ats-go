// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/merge-ats-go/pkg/utils"
)

// Encoding - The encoding of the value of `data`. Defaults to `RAW` if not defined.
//
// * `RAW` - RAW
// * `BASE64` - BASE64
// * `GZIP_BASE64` - GZIP_BASE64
type Encoding string

const (
	EncodingRaw        Encoding = "RAW"
	EncodingBase64     Encoding = "BASE64"
	EncodingGzipBase64 Encoding = "GZIP_BASE64"
)

func (e Encoding) ToPointer() *Encoding {
	return &e
}

func (e *Encoding) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RAW":
		fallthrough
	case "BASE64":
		fallthrough
	case "GZIP_BASE64":
		*e = Encoding(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Encoding: %v", v)
	}
}

// MultipartFormFieldRequest - # The MultipartFormField Object
// ### Description
// The `MultipartFormField` object is used to represent fields in an HTTP request using `multipart/form-data`.
//
// ### Usage Example
// Create a `MultipartFormField` to define a multipart form entry.
type MultipartFormFieldRequest struct {
	// The MIME type of the file, if the field is for a file.
	ContentType *string `json:"content_type,omitempty"`
	// The data for the form field.
	Data string `json:"data"`
	// The encoding of the value of `data`. Defaults to `RAW` if not defined.
	//
	// * `RAW` - RAW
	// * `BASE64` - BASE64
	// * `GZIP_BASE64` - GZIP_BASE64
	Encoding *Encoding `default:"RAW" json:"encoding"`
	// The file name of the form field, if the field is for a file.
	FileName *string `json:"file_name,omitempty"`
	// The name of the form field
	Name string `json:"name"`
}

func (m MultipartFormFieldRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MultipartFormFieldRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MultipartFormFieldRequest) GetContentType() *string {
	if o == nil {
		return nil
	}
	return o.ContentType
}

func (o *MultipartFormFieldRequest) GetData() string {
	if o == nil {
		return ""
	}
	return o.Data
}

func (o *MultipartFormFieldRequest) GetEncoding() *Encoding {
	if o == nil {
		return nil
	}
	return o.Encoding
}

func (o *MultipartFormFieldRequest) GetFileName() *string {
	if o == nil {
		return nil
	}
	return o.FileName
}

func (o *MultipartFormFieldRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}
