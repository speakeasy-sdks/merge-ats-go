// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ActivityActivityType - * `NOTE` - NOTE
// * `EMAIL` - EMAIL
// * `OTHER` - OTHER
type ActivityActivityType string

const (
	ActivityActivityTypeNote  ActivityActivityType = "NOTE"
	ActivityActivityTypeEmail ActivityActivityType = "EMAIL"
	ActivityActivityTypeOther ActivityActivityType = "OTHER"
)

func (e ActivityActivityType) ToPointer() *ActivityActivityType {
	return &e
}

func (e *ActivityActivityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOTE":
		fallthrough
	case "EMAIL":
		fallthrough
	case "OTHER":
		*e = ActivityActivityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityActivityType: %v", v)
	}
}

// ActivityVisibility - * `ADMIN_ONLY` - ADMIN_ONLY
// * `PUBLIC` - PUBLIC
// * `PRIVATE` - PRIVATE
type ActivityVisibility string

const (
	ActivityVisibilityAdminOnly ActivityVisibility = "ADMIN_ONLY"
	ActivityVisibilityPublic    ActivityVisibility = "PUBLIC"
	ActivityVisibilityPrivate   ActivityVisibility = "PRIVATE"
)

func (e ActivityVisibility) ToPointer() *ActivityVisibility {
	return &e
}

func (e *ActivityVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN_ONLY":
		fallthrough
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = ActivityVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityVisibility: %v", v)
	}
}

// Activity - # The Activity Object
// ### Description
// The `Activity` object is used to represent an activity for a candidate performed by a user.
// ### Usage Example
// Fetch from the `LIST Activities` endpoint and filter by `ID` to show all activities.
type Activity struct {
	// The activity's type.
	//
	// * `NOTE` - NOTE
	// * `EMAIL` - EMAIL
	// * `OTHER` - OTHER
	ActivityType *ActivityActivityType `json:"activity_type,omitempty"`
	// The activity's body.
	Body *string `json:"body,omitempty"`
	// The activityâ€™s candidate.
	Candidate     *string                `json:"candidate,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	ID            *string                `json:"id,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// When the third party's activity was created.
	RemoteCreatedAt *time.Time   `json:"remote_created_at,omitempty"`
	RemoteData      []RemoteData `json:"remote_data,omitempty"`
	// The third-party API ID of the matching object.
	RemoteID *string `json:"remote_id,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
	// The activity's subject.
	Subject *string `json:"subject,omitempty"`
	// The user that performed the action.
	User *string `json:"user,omitempty"`
	// The activity's visibility.
	//
	// * `ADMIN_ONLY` - ADMIN_ONLY
	// * `PUBLIC` - PUBLIC
	// * `PRIVATE` - PRIVATE
	Visibility *ActivityVisibility `json:"visibility,omitempty"`
}

func (o *Activity) GetActivityType() *ActivityActivityType {
	if o == nil {
		return nil
	}
	return o.ActivityType
}

func (o *Activity) GetBody() *string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *Activity) GetCandidate() *string {
	if o == nil {
		return nil
	}
	return o.Candidate
}

func (o *Activity) GetFieldMappings() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *Activity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Activity) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *Activity) GetRemoteCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteCreatedAt
}

func (o *Activity) GetRemoteData() []RemoteData {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *Activity) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *Activity) GetRemoteWasDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.RemoteWasDeleted
}

func (o *Activity) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *Activity) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *Activity) GetVisibility() *ActivityVisibility {
	if o == nil {
		return nil
	}
	return o.Visibility
}
