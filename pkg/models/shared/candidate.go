// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/merge-ats-go/pkg/utils"
	"time"
)

// Candidate - # The Candidate Object
// ### Description
// The `Candidate` object is used to represent profile information about a given Candidate. Because it is specific to a Candidate, this information stays constant across applications.
// ### Usage Example
// Fetch from the `LIST Candidates` endpoint and filter by `ID` to show all candidates.
type Candidate struct {
	// Array of `Application` object IDs.
	Applications []string `json:"applications,omitempty"`
	// Array of `Attachment` object IDs.
	Attachments []string `json:"attachments,omitempty"`
	// Whether or not the candidate can be emailed.
	CanEmail *bool `json:"can_email,omitempty"`
	// The candidate's current company.
	Company        *string                `json:"company,omitempty"`
	EmailAddresses []EmailAddress         `json:"email_addresses,omitempty"`
	FieldMappings  map[string]interface{} `json:"field_mappings,omitempty"`
	// The candidate's first name.
	FirstName *string `json:"first_name,omitempty"`
	ID        *string `json:"id,omitempty"`
	// Whether or not the candidate is private.
	IsPrivate *bool `json:"is_private,omitempty"`
	// When the most recent interaction with the candidate occurred.
	LastInteractionAt *time.Time `json:"last_interaction_at,omitempty"`
	// The candidate's last name.
	LastName *string `json:"last_name,omitempty"`
	// The candidate's locations.
	Locations []string `json:"locations,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt   *time.Time    `json:"modified_at,omitempty"`
	PhoneNumbers []PhoneNumber `json:"phone_numbers,omitempty"`
	// When the third party's candidate was created.
	RemoteCreatedAt *time.Time   `json:"remote_created_at,omitempty"`
	RemoteData      []RemoteData `json:"remote_data,omitempty"`
	// The third-party API ID of the matching object.
	RemoteID *string `json:"remote_id,omitempty"`
	// When the third party's candidate was updated.
	RemoteUpdatedAt  *time.Time `json:"remote_updated_at,omitempty"`
	RemoteWasDeleted *bool      `json:"remote_was_deleted,omitempty"`
	// Array of `Tag` names as strings.
	Tags []string `json:"tags,omitempty"`
	// The candidate's current title.
	Title *string `json:"title,omitempty"`
	Urls  []URL   `json:"urls,omitempty"`
}

func (c Candidate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Candidate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Candidate) GetApplications() []string {
	if o == nil {
		return nil
	}
	return o.Applications
}

func (o *Candidate) GetAttachments() []string {
	if o == nil {
		return nil
	}
	return o.Attachments
}

func (o *Candidate) GetCanEmail() *bool {
	if o == nil {
		return nil
	}
	return o.CanEmail
}

func (o *Candidate) GetCompany() *string {
	if o == nil {
		return nil
	}
	return o.Company
}

func (o *Candidate) GetEmailAddresses() []EmailAddress {
	if o == nil {
		return nil
	}
	return o.EmailAddresses
}

func (o *Candidate) GetFieldMappings() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *Candidate) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *Candidate) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Candidate) GetIsPrivate() *bool {
	if o == nil {
		return nil
	}
	return o.IsPrivate
}

func (o *Candidate) GetLastInteractionAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastInteractionAt
}

func (o *Candidate) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *Candidate) GetLocations() []string {
	if o == nil {
		return nil
	}
	return o.Locations
}

func (o *Candidate) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *Candidate) GetPhoneNumbers() []PhoneNumber {
	if o == nil {
		return nil
	}
	return o.PhoneNumbers
}

func (o *Candidate) GetRemoteCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteCreatedAt
}

func (o *Candidate) GetRemoteData() []RemoteData {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *Candidate) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *Candidate) GetRemoteUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteUpdatedAt
}

func (o *Candidate) GetRemoteWasDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.RemoteWasDeleted
}

func (o *Candidate) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Candidate) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Candidate) GetUrls() []URL {
	if o == nil {
		return nil
	}
	return o.Urls
}
