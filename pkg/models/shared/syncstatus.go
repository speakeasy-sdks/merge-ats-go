// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// SyncStatusStatus - * `SYNCING` - SYNCING
// * `DONE` - DONE
// * `FAILED` - FAILED
// * `DISABLED` - DISABLED
// * `PAUSED` - PAUSED
// * `PARTIALLY_SYNCED` - PARTIALLY_SYNCED
type SyncStatusStatus string

const (
	SyncStatusStatusSyncing         SyncStatusStatus = "SYNCING"
	SyncStatusStatusDone            SyncStatusStatus = "DONE"
	SyncStatusStatusFailed          SyncStatusStatus = "FAILED"
	SyncStatusStatusDisabled        SyncStatusStatus = "DISABLED"
	SyncStatusStatusPaused          SyncStatusStatus = "PAUSED"
	SyncStatusStatusPartiallySynced SyncStatusStatus = "PARTIALLY_SYNCED"
)

func (e SyncStatusStatus) ToPointer() *SyncStatusStatus {
	return &e
}

func (e *SyncStatusStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SYNCING":
		fallthrough
	case "DONE":
		fallthrough
	case "FAILED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "PAUSED":
		fallthrough
	case "PARTIALLY_SYNCED":
		*e = SyncStatusStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyncStatusStatus: %v", v)
	}
}

// SyncStatus - # The SyncStatus Object
// ### Description
// The `SyncStatus` object is used to represent the syncing state of an account
//
// ### Usage Example
// View the `SyncStatus` for an account to see how recently its models were synced.
type SyncStatus struct {
	IsInitialSync bool       `json:"is_initial_sync"`
	LastSyncStart *time.Time `json:"last_sync_start,omitempty"`
	ModelID       string     `json:"model_id"`
	ModelName     string     `json:"model_name"`
	NextSyncStart *time.Time `json:"next_sync_start,omitempty"`
	// * `IN_NEXT_SYNC` - IN_NEXT_SYNC
	// * `IN_LAST_SYNC` - IN_LAST_SYNC
	SelectiveSyncConfigurationsUsage *SelectiveSyncConfigurationsUsageEnum `json:"selective_sync_configurations_usage,omitempty"`
	Status                           SyncStatusStatus                      `json:"status"`
}

func (o *SyncStatus) GetIsInitialSync() bool {
	if o == nil {
		return false
	}
	return o.IsInitialSync
}

func (o *SyncStatus) GetLastSyncStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastSyncStart
}

func (o *SyncStatus) GetModelID() string {
	if o == nil {
		return ""
	}
	return o.ModelID
}

func (o *SyncStatus) GetModelName() string {
	if o == nil {
		return ""
	}
	return o.ModelName
}

func (o *SyncStatus) GetNextSyncStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.NextSyncStart
}

func (o *SyncStatus) GetSelectiveSyncConfigurationsUsage() *SelectiveSyncConfigurationsUsageEnum {
	if o == nil {
		return nil
	}
	return o.SelectiveSyncConfigurationsUsage
}

func (o *SyncStatus) GetStatus() SyncStatusStatus {
	if o == nil {
		return SyncStatusStatus("")
	}
	return o.Status
}
