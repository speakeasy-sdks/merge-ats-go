// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// RemoteUserAccessRole - * `SUPER_ADMIN` - SUPER_ADMIN
// * `ADMIN` - ADMIN
// * `TEAM_MEMBER` - TEAM_MEMBER
// * `LIMITED_TEAM_MEMBER` - LIMITED_TEAM_MEMBER
// * `INTERVIEWER` - INTERVIEWER
type RemoteUserAccessRole string

const (
	RemoteUserAccessRoleSuperAdmin        RemoteUserAccessRole = "SUPER_ADMIN"
	RemoteUserAccessRoleAdmin             RemoteUserAccessRole = "ADMIN"
	RemoteUserAccessRoleTeamMember        RemoteUserAccessRole = "TEAM_MEMBER"
	RemoteUserAccessRoleLimitedTeamMember RemoteUserAccessRole = "LIMITED_TEAM_MEMBER"
	RemoteUserAccessRoleInterviewer       RemoteUserAccessRole = "INTERVIEWER"
)

func (e RemoteUserAccessRole) ToPointer() *RemoteUserAccessRole {
	return &e
}

func (e *RemoteUserAccessRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUPER_ADMIN":
		fallthrough
	case "ADMIN":
		fallthrough
	case "TEAM_MEMBER":
		fallthrough
	case "LIMITED_TEAM_MEMBER":
		fallthrough
	case "INTERVIEWER":
		*e = RemoteUserAccessRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoteUserAccessRole: %v", v)
	}
}

// RemoteUser - # The RemoteUser Object
// ### Description
// The `RemoteUser` object is used to represent a user with a login to the ATS system.
// ### Usage Example
// Fetch from the `LIST RemoteUsers` endpoint to show all users for a third party.
type RemoteUser struct {
	// The user's role.
	//
	// * `SUPER_ADMIN` - SUPER_ADMIN
	// * `ADMIN` - ADMIN
	// * `TEAM_MEMBER` - TEAM_MEMBER
	// * `LIMITED_TEAM_MEMBER` - LIMITED_TEAM_MEMBER
	// * `INTERVIEWER` - INTERVIEWER
	AccessRole *RemoteUserAccessRole `json:"access_role,omitempty"`
	// Whether the user's account had been disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// The user's email.
	Email         *string                `json:"email,omitempty"`
	FieldMappings map[string]interface{} `json:"field_mappings,omitempty"`
	// The user's first name.
	FirstName *string `json:"first_name,omitempty"`
	ID        *string `json:"id,omitempty"`
	// The user's last name.
	LastName *string `json:"last_name,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// When the third party's user was created.
	RemoteCreatedAt *time.Time   `json:"remote_created_at,omitempty"`
	RemoteData      []RemoteData `json:"remote_data,omitempty"`
	// The third-party API ID of the matching object.
	RemoteID *string `json:"remote_id,omitempty"`
	// Indicates whether or not this object has been deleted by third party webhooks.
	RemoteWasDeleted *bool `json:"remote_was_deleted,omitempty"`
}

func (o *RemoteUser) GetAccessRole() *RemoteUserAccessRole {
	if o == nil {
		return nil
	}
	return o.AccessRole
}

func (o *RemoteUser) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *RemoteUser) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *RemoteUser) GetFieldMappings() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.FieldMappings
}

func (o *RemoteUser) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *RemoteUser) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RemoteUser) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *RemoteUser) GetModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModifiedAt
}

func (o *RemoteUser) GetRemoteCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RemoteCreatedAt
}

func (o *RemoteUser) GetRemoteData() []RemoteData {
	if o == nil {
		return nil
	}
	return o.RemoteData
}

func (o *RemoteUser) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *RemoteUser) GetRemoteWasDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.RemoteWasDeleted
}
