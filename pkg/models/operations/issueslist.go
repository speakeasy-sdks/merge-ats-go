// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/merge-ats-go/pkg/models/shared"
	"github.com/speakeasy-sdks/merge-ats-go/pkg/utils"
	"net/http"
	"time"
)

// IssuesListStatus - Status of the issue. Options: ('ONGOING', 'RESOLVED')
//
// * `ONGOING` - ONGOING
// * `RESOLVED` - RESOLVED
type IssuesListStatus string

const (
	IssuesListStatusOngoing  IssuesListStatus = "ONGOING"
	IssuesListStatusResolved IssuesListStatus = "RESOLVED"
)

func (e IssuesListStatus) ToPointer() *IssuesListStatus {
	return &e
}

func (e *IssuesListStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ONGOING":
		fallthrough
	case "RESOLVED":
		*e = IssuesListStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesListStatus: %v", v)
	}
}

type IssuesListRequest struct {
	AccountToken *string `queryParam:"style=form,explode=true,name=account_token"`
	// The pagination cursor value.
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// If included, will only include issues whose most recent action occurred before this time
	EndDate                 *string `queryParam:"style=form,explode=true,name=end_date"`
	EndUserOrganizationName *string `queryParam:"style=form,explode=true,name=end_user_organization_name"`
	// If provided, will only return issues whose first incident time was after this datetime.
	FirstIncidentTimeAfter *time.Time `queryParam:"style=form,explode=true,name=first_incident_time_after"`
	// If provided, will only return issues whose first incident time was before this datetime.
	FirstIncidentTimeBefore *time.Time `queryParam:"style=form,explode=true,name=first_incident_time_before"`
	// If True, will include muted issues
	IncludeMuted    *string `queryParam:"style=form,explode=true,name=include_muted"`
	IntegrationName *string `queryParam:"style=form,explode=true,name=integration_name"`
	// If provided, will only return issues whose last incident time was after this datetime.
	LastIncidentTimeAfter *time.Time `queryParam:"style=form,explode=true,name=last_incident_time_after"`
	// If provided, will only return issues whose last incident time was before this datetime.
	LastIncidentTimeBefore *time.Time `queryParam:"style=form,explode=true,name=last_incident_time_before"`
	// Number of results to return per page.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// If included, will only include issues whose most recent action occurred after this time
	StartDate *string `queryParam:"style=form,explode=true,name=start_date"`
	// Status of the issue. Options: ('ONGOING', 'RESOLVED')
	//
	// * `ONGOING` - ONGOING
	// * `RESOLVED` - RESOLVED
	Status *IssuesListStatus `queryParam:"style=form,explode=true,name=status"`
}

func (i IssuesListRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IssuesListRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *IssuesListRequest) GetAccountToken() *string {
	if o == nil {
		return nil
	}
	return o.AccountToken
}

func (o *IssuesListRequest) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *IssuesListRequest) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *IssuesListRequest) GetEndUserOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.EndUserOrganizationName
}

func (o *IssuesListRequest) GetFirstIncidentTimeAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.FirstIncidentTimeAfter
}

func (o *IssuesListRequest) GetFirstIncidentTimeBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.FirstIncidentTimeBefore
}

func (o *IssuesListRequest) GetIncludeMuted() *string {
	if o == nil {
		return nil
	}
	return o.IncludeMuted
}

func (o *IssuesListRequest) GetIntegrationName() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationName
}

func (o *IssuesListRequest) GetLastIncidentTimeAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastIncidentTimeAfter
}

func (o *IssuesListRequest) GetLastIncidentTimeBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastIncidentTimeBefore
}

func (o *IssuesListRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *IssuesListRequest) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *IssuesListRequest) GetStatus() *IssuesListStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type IssuesListResponse struct {
	// HTTP response content type for this operation
	ContentType        string
	PaginatedIssueList *shared.PaginatedIssueList
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *IssuesListResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *IssuesListResponse) GetPaginatedIssueList() *shared.PaginatedIssueList {
	if o == nil {
		return nil
	}
	return o.PaginatedIssueList
}

func (o *IssuesListResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *IssuesListResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
