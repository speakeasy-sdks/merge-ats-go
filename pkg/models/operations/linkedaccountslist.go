// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/merge-ats-go/pkg/models/shared"
	"net/http"
)

// LinkedAccountsListCategory - Options: ('hris', 'ats', 'accounting', 'ticketing', 'crm', 'mktg', 'filestorage')
//
// * `hris` - hris
// * `ats` - ats
// * `accounting` - accounting
// * `ticketing` - ticketing
// * `crm` - crm
// * `mktg` - mktg
// * `filestorage` - filestorage
type LinkedAccountsListCategory string

const (
	LinkedAccountsListCategoryAccounting  LinkedAccountsListCategory = "accounting"
	LinkedAccountsListCategoryAts         LinkedAccountsListCategory = "ats"
	LinkedAccountsListCategoryCrm         LinkedAccountsListCategory = "crm"
	LinkedAccountsListCategoryFilestorage LinkedAccountsListCategory = "filestorage"
	LinkedAccountsListCategoryHris        LinkedAccountsListCategory = "hris"
	LinkedAccountsListCategoryMktg        LinkedAccountsListCategory = "mktg"
	LinkedAccountsListCategoryTicketing   LinkedAccountsListCategory = "ticketing"
)

func (e LinkedAccountsListCategory) ToPointer() *LinkedAccountsListCategory {
	return &e
}

func (e *LinkedAccountsListCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accounting":
		fallthrough
	case "ats":
		fallthrough
	case "crm":
		fallthrough
	case "filestorage":
		fallthrough
	case "hris":
		fallthrough
	case "mktg":
		fallthrough
	case "ticketing":
		*e = LinkedAccountsListCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LinkedAccountsListCategory: %v", v)
	}
}

type LinkedAccountsListRequest struct {
	// Options: ('hris', 'ats', 'accounting', 'ticketing', 'crm', 'mktg', 'filestorage')
	//
	// * `hris` - hris
	// * `ats` - ats
	// * `accounting` - accounting
	// * `ticketing` - ticketing
	// * `crm` - crm
	// * `mktg` - mktg
	// * `filestorage` - filestorage
	Category *LinkedAccountsListCategory `queryParam:"style=form,explode=true,name=category"`
	// The pagination cursor value.
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// If provided, will only return linked accounts associated with the given email address.
	EndUserEmailAddress *string `queryParam:"style=form,explode=true,name=end_user_email_address"`
	// If provided, will only return linked accounts associated with the given organization name.
	EndUserOrganizationName *string `queryParam:"style=form,explode=true,name=end_user_organization_name"`
	// If provided, will only return linked accounts associated with the given origin ID.
	EndUserOriginID *string `queryParam:"style=form,explode=true,name=end_user_origin_id"`
	// Comma-separated list of EndUser origin IDs, making it possible to specify multiple EndUsers at once.
	EndUserOriginIds *string `queryParam:"style=form,explode=true,name=end_user_origin_ids"`
	ID               *string `queryParam:"style=form,explode=true,name=id"`
	// Comma-separated list of LinkedAccount IDs, making it possible to specify multiple LinkedAccounts at once.
	Ids *string `queryParam:"style=form,explode=true,name=ids"`
	// If `true`, will include complete production duplicates of the account specified by the `id` query parameter in the response. `id` must be for a complete production linked account.
	IncludeDuplicates *bool `queryParam:"style=form,explode=true,name=include_duplicates"`
	// If provided, will only return linked accounts associated with the given integration name.
	IntegrationName *string `queryParam:"style=form,explode=true,name=integration_name"`
	// If included, will only include test linked accounts. If not included, will only include non-test linked accounts.
	IsTestAccount *string `queryParam:"style=form,explode=true,name=is_test_account"`
	// Number of results to return per page.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// Filter by status. Options: `COMPLETE`, `INCOMPLETE`, `RELINK_NEEDED`
	Status *string `queryParam:"style=form,explode=true,name=status"`
}

func (o *LinkedAccountsListRequest) GetCategory() *LinkedAccountsListCategory {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *LinkedAccountsListRequest) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *LinkedAccountsListRequest) GetEndUserEmailAddress() *string {
	if o == nil {
		return nil
	}
	return o.EndUserEmailAddress
}

func (o *LinkedAccountsListRequest) GetEndUserOrganizationName() *string {
	if o == nil {
		return nil
	}
	return o.EndUserOrganizationName
}

func (o *LinkedAccountsListRequest) GetEndUserOriginID() *string {
	if o == nil {
		return nil
	}
	return o.EndUserOriginID
}

func (o *LinkedAccountsListRequest) GetEndUserOriginIds() *string {
	if o == nil {
		return nil
	}
	return o.EndUserOriginIds
}

func (o *LinkedAccountsListRequest) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *LinkedAccountsListRequest) GetIds() *string {
	if o == nil {
		return nil
	}
	return o.Ids
}

func (o *LinkedAccountsListRequest) GetIncludeDuplicates() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeDuplicates
}

func (o *LinkedAccountsListRequest) GetIntegrationName() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationName
}

func (o *LinkedAccountsListRequest) GetIsTestAccount() *string {
	if o == nil {
		return nil
	}
	return o.IsTestAccount
}

func (o *LinkedAccountsListRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *LinkedAccountsListRequest) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

type LinkedAccountsListResponse struct {
	ContentType                           string
	PaginatedAccountDetailsAndActionsList *shared.PaginatedAccountDetailsAndActionsList
	StatusCode                            int
	RawResponse                           *http.Response
}

func (o *LinkedAccountsListResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *LinkedAccountsListResponse) GetPaginatedAccountDetailsAndActionsList() *shared.PaginatedAccountDetailsAndActionsList {
	if o == nil {
		return nil
	}
	return o.PaginatedAccountDetailsAndActionsList
}

func (o *LinkedAccountsListResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *LinkedAccountsListResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
