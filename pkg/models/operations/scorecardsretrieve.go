// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/merge-ats-go/pkg/models/shared"
	"net/http"
)

type ScorecardsRetrieveSecurity struct {
	TokenAuth string `security:"scheme,type=apiKey,subtype=header,name=Authorization"`
}

func (o *ScorecardsRetrieveSecurity) GetTokenAuth() string {
	if o == nil {
		return ""
	}
	return o.TokenAuth
}

// ScorecardsRetrieveExpand - Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
type ScorecardsRetrieveExpand string

const (
	ScorecardsRetrieveExpandApplication                     ScorecardsRetrieveExpand = "application"
	ScorecardsRetrieveExpandApplicationInterview            ScorecardsRetrieveExpand = "application,interview"
	ScorecardsRetrieveExpandApplicationInterviewInterviewer ScorecardsRetrieveExpand = "application,interview,interviewer"
	ScorecardsRetrieveExpandApplicationInterviewer          ScorecardsRetrieveExpand = "application,interviewer"
	ScorecardsRetrieveExpandInterview                       ScorecardsRetrieveExpand = "interview"
	ScorecardsRetrieveExpandInterviewInterviewer            ScorecardsRetrieveExpand = "interview,interviewer"
	ScorecardsRetrieveExpandInterviewer                     ScorecardsRetrieveExpand = "interviewer"
)

func (e ScorecardsRetrieveExpand) ToPointer() *ScorecardsRetrieveExpand {
	return &e
}

func (e *ScorecardsRetrieveExpand) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "application":
		fallthrough
	case "application,interview":
		fallthrough
	case "application,interview,interviewer":
		fallthrough
	case "application,interviewer":
		fallthrough
	case "interview":
		fallthrough
	case "interview,interviewer":
		fallthrough
	case "interviewer":
		*e = ScorecardsRetrieveExpand(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScorecardsRetrieveExpand: %v", v)
	}
}

// ScorecardsRetrieveRemoteFields - Deprecated. Use show_enum_origins.
type ScorecardsRetrieveRemoteFields string

const (
	ScorecardsRetrieveRemoteFieldsOverallRecommendation ScorecardsRetrieveRemoteFields = "overall_recommendation"
)

func (e ScorecardsRetrieveRemoteFields) ToPointer() *ScorecardsRetrieveRemoteFields {
	return &e
}

func (e *ScorecardsRetrieveRemoteFields) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "overall_recommendation":
		*e = ScorecardsRetrieveRemoteFields(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScorecardsRetrieveRemoteFields: %v", v)
	}
}

// ScorecardsRetrieveShowEnumOrigins - Which fields should be returned in non-normalized form.
type ScorecardsRetrieveShowEnumOrigins string

const (
	ScorecardsRetrieveShowEnumOriginsOverallRecommendation ScorecardsRetrieveShowEnumOrigins = "overall_recommendation"
)

func (e ScorecardsRetrieveShowEnumOrigins) ToPointer() *ScorecardsRetrieveShowEnumOrigins {
	return &e
}

func (e *ScorecardsRetrieveShowEnumOrigins) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "overall_recommendation":
		*e = ScorecardsRetrieveShowEnumOrigins(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScorecardsRetrieveShowEnumOrigins: %v", v)
	}
}

type ScorecardsRetrieveRequest struct {
	// Token identifying the end user.
	XAccountToken string `header:"style=simple,explode=false,name=X-Account-Token"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *ScorecardsRetrieveExpand `queryParam:"style=form,explode=true,name=expand"`
	ID     string                    `pathParam:"style=simple,explode=false,name=id"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `queryParam:"style=form,explode=true,name=include_remote_data"`
	// Deprecated. Use show_enum_origins.
	RemoteFields *ScorecardsRetrieveRemoteFields `queryParam:"style=form,explode=true,name=remote_fields"`
	// Which fields should be returned in non-normalized form.
	ShowEnumOrigins *ScorecardsRetrieveShowEnumOrigins `queryParam:"style=form,explode=true,name=show_enum_origins"`
}

func (o *ScorecardsRetrieveRequest) GetXAccountToken() string {
	if o == nil {
		return ""
	}
	return o.XAccountToken
}

func (o *ScorecardsRetrieveRequest) GetExpand() *ScorecardsRetrieveExpand {
	if o == nil {
		return nil
	}
	return o.Expand
}

func (o *ScorecardsRetrieveRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ScorecardsRetrieveRequest) GetIncludeRemoteData() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeRemoteData
}

func (o *ScorecardsRetrieveRequest) GetRemoteFields() *ScorecardsRetrieveRemoteFields {
	if o == nil {
		return nil
	}
	return o.RemoteFields
}

func (o *ScorecardsRetrieveRequest) GetShowEnumOrigins() *ScorecardsRetrieveShowEnumOrigins {
	if o == nil {
		return nil
	}
	return o.ShowEnumOrigins
}

type ScorecardsRetrieveResponse struct {
	ContentType string
	Scorecard   *shared.Scorecard
	StatusCode  int
	RawResponse *http.Response
}

func (o *ScorecardsRetrieveResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ScorecardsRetrieveResponse) GetScorecard() *shared.Scorecard {
	if o == nil {
		return nil
	}
	return o.Scorecard
}

func (o *ScorecardsRetrieveResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ScorecardsRetrieveResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
