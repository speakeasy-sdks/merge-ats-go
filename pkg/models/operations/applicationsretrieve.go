// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/merge-ats-go/pkg/models/shared"
	"net/http"
)

type ApplicationsRetrieveSecurity struct {
	TokenAuth string `security:"scheme,type=apiKey,subtype=header,name=Authorization"`
}

func (o *ApplicationsRetrieveSecurity) GetTokenAuth() string {
	if o == nil {
		return ""
	}
	return o.TokenAuth
}

// ApplicationsRetrieveExpand - Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
type ApplicationsRetrieveExpand string

const (
	ApplicationsRetrieveExpandCandidate                                      ApplicationsRetrieveExpand = "candidate"
	ApplicationsRetrieveExpandCandidateCreditedTo                            ApplicationsRetrieveExpand = "candidate,credited_to"
	ApplicationsRetrieveExpandCandidateCreditedToCurrentStage                ApplicationsRetrieveExpand = "candidate,credited_to,current_stage"
	ApplicationsRetrieveExpandCandidateCreditedToCurrentStageRejectReason    ApplicationsRetrieveExpand = "candidate,credited_to,current_stage,reject_reason"
	ApplicationsRetrieveExpandCandidateCreditedToRejectReason                ApplicationsRetrieveExpand = "candidate,credited_to,reject_reason"
	ApplicationsRetrieveExpandCandidateCurrentStage                          ApplicationsRetrieveExpand = "candidate,current_stage"
	ApplicationsRetrieveExpandCandidateCurrentStageRejectReason              ApplicationsRetrieveExpand = "candidate,current_stage,reject_reason"
	ApplicationsRetrieveExpandCandidateJob                                   ApplicationsRetrieveExpand = "candidate,job"
	ApplicationsRetrieveExpandCandidateJobCreditedTo                         ApplicationsRetrieveExpand = "candidate,job,credited_to"
	ApplicationsRetrieveExpandCandidateJobCreditedToCurrentStage             ApplicationsRetrieveExpand = "candidate,job,credited_to,current_stage"
	ApplicationsRetrieveExpandCandidateJobCreditedToCurrentStageRejectReason ApplicationsRetrieveExpand = "candidate,job,credited_to,current_stage,reject_reason"
	ApplicationsRetrieveExpandCandidateJobCreditedToRejectReason             ApplicationsRetrieveExpand = "candidate,job,credited_to,reject_reason"
	ApplicationsRetrieveExpandCandidateJobCurrentStage                       ApplicationsRetrieveExpand = "candidate,job,current_stage"
	ApplicationsRetrieveExpandCandidateJobCurrentStageRejectReason           ApplicationsRetrieveExpand = "candidate,job,current_stage,reject_reason"
	ApplicationsRetrieveExpandCandidateJobRejectReason                       ApplicationsRetrieveExpand = "candidate,job,reject_reason"
	ApplicationsRetrieveExpandCandidateRejectReason                          ApplicationsRetrieveExpand = "candidate,reject_reason"
	ApplicationsRetrieveExpandCreditedTo                                     ApplicationsRetrieveExpand = "credited_to"
	ApplicationsRetrieveExpandCreditedToCurrentStage                         ApplicationsRetrieveExpand = "credited_to,current_stage"
	ApplicationsRetrieveExpandCreditedToCurrentStageRejectReason             ApplicationsRetrieveExpand = "credited_to,current_stage,reject_reason"
	ApplicationsRetrieveExpandCreditedToRejectReason                         ApplicationsRetrieveExpand = "credited_to,reject_reason"
	ApplicationsRetrieveExpandCurrentStage                                   ApplicationsRetrieveExpand = "current_stage"
	ApplicationsRetrieveExpandCurrentStageRejectReason                       ApplicationsRetrieveExpand = "current_stage,reject_reason"
	ApplicationsRetrieveExpandJob                                            ApplicationsRetrieveExpand = "job"
	ApplicationsRetrieveExpandJobCreditedTo                                  ApplicationsRetrieveExpand = "job,credited_to"
	ApplicationsRetrieveExpandJobCreditedToCurrentStage                      ApplicationsRetrieveExpand = "job,credited_to,current_stage"
	ApplicationsRetrieveExpandJobCreditedToCurrentStageRejectReason          ApplicationsRetrieveExpand = "job,credited_to,current_stage,reject_reason"
	ApplicationsRetrieveExpandJobCreditedToRejectReason                      ApplicationsRetrieveExpand = "job,credited_to,reject_reason"
	ApplicationsRetrieveExpandJobCurrentStage                                ApplicationsRetrieveExpand = "job,current_stage"
	ApplicationsRetrieveExpandJobCurrentStageRejectReason                    ApplicationsRetrieveExpand = "job,current_stage,reject_reason"
	ApplicationsRetrieveExpandJobRejectReason                                ApplicationsRetrieveExpand = "job,reject_reason"
	ApplicationsRetrieveExpandRejectReason                                   ApplicationsRetrieveExpand = "reject_reason"
)

func (e ApplicationsRetrieveExpand) ToPointer() *ApplicationsRetrieveExpand {
	return &e
}

func (e *ApplicationsRetrieveExpand) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "candidate":
		fallthrough
	case "candidate,credited_to":
		fallthrough
	case "candidate,credited_to,current_stage":
		fallthrough
	case "candidate,credited_to,current_stage,reject_reason":
		fallthrough
	case "candidate,credited_to,reject_reason":
		fallthrough
	case "candidate,current_stage":
		fallthrough
	case "candidate,current_stage,reject_reason":
		fallthrough
	case "candidate,job":
		fallthrough
	case "candidate,job,credited_to":
		fallthrough
	case "candidate,job,credited_to,current_stage":
		fallthrough
	case "candidate,job,credited_to,current_stage,reject_reason":
		fallthrough
	case "candidate,job,credited_to,reject_reason":
		fallthrough
	case "candidate,job,current_stage":
		fallthrough
	case "candidate,job,current_stage,reject_reason":
		fallthrough
	case "candidate,job,reject_reason":
		fallthrough
	case "candidate,reject_reason":
		fallthrough
	case "credited_to":
		fallthrough
	case "credited_to,current_stage":
		fallthrough
	case "credited_to,current_stage,reject_reason":
		fallthrough
	case "credited_to,reject_reason":
		fallthrough
	case "current_stage":
		fallthrough
	case "current_stage,reject_reason":
		fallthrough
	case "job":
		fallthrough
	case "job,credited_to":
		fallthrough
	case "job,credited_to,current_stage":
		fallthrough
	case "job,credited_to,current_stage,reject_reason":
		fallthrough
	case "job,credited_to,reject_reason":
		fallthrough
	case "job,current_stage":
		fallthrough
	case "job,current_stage,reject_reason":
		fallthrough
	case "job,reject_reason":
		fallthrough
	case "reject_reason":
		*e = ApplicationsRetrieveExpand(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicationsRetrieveExpand: %v", v)
	}
}

type ApplicationsRetrieveRequest struct {
	// Token identifying the end user.
	XAccountToken string `header:"style=simple,explode=false,name=X-Account-Token"`
	// Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.
	Expand *ApplicationsRetrieveExpand `queryParam:"style=form,explode=true,name=expand"`
	ID     string                      `pathParam:"style=simple,explode=false,name=id"`
	// Whether to include the original data Merge fetched from the third-party to produce these models.
	IncludeRemoteData *bool `queryParam:"style=form,explode=true,name=include_remote_data"`
}

func (o *ApplicationsRetrieveRequest) GetXAccountToken() string {
	if o == nil {
		return ""
	}
	return o.XAccountToken
}

func (o *ApplicationsRetrieveRequest) GetExpand() *ApplicationsRetrieveExpand {
	if o == nil {
		return nil
	}
	return o.Expand
}

func (o *ApplicationsRetrieveRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ApplicationsRetrieveRequest) GetIncludeRemoteData() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeRemoteData
}

type ApplicationsRetrieveResponse struct {
	Application *shared.Application
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}

func (o *ApplicationsRetrieveResponse) GetApplication() *shared.Application {
	if o == nil {
		return nil
	}
	return o.Application
}

func (o *ApplicationsRetrieveResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ApplicationsRetrieveResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ApplicationsRetrieveResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
